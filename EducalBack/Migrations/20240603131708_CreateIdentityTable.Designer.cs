// <auto-generated />
using System;
using EducalBack.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EducalBack.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240603131708_CreateIdentityTable")]
    partial class CreateIdentityTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.31")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EducalBack.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("EducalBack.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 6, 3, 17, 17, 7, 920, DateTimeKind.Local).AddTicks(4930),
                            Description = "Development is everything",
                            Image = "category-icon-1.jpeg",
                            Name = "Development",
                            SoftDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 6, 3, 17, 17, 7, 920, DateTimeKind.Local).AddTicks(4940),
                            Description = "Design is everything",
                            Image = "category-icon-2.jpeg",
                            Name = "Design",
                            SoftDeleted = false
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 6, 3, 17, 17, 7, 920, DateTimeKind.Local).AddTicks(4940),
                            Description = "Data is everything",
                            Image = "category-icon-3.jpeg",
                            Name = "Data Science",
                            SoftDeleted = false
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 6, 3, 17, 17, 7, 920, DateTimeKind.Local).AddTicks(4940),
                            Description = "Improve your business",
                            Image = "category-icon-4.jpeg",
                            Name = "Business",
                            SoftDeleted = false
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 6, 3, 17, 17, 7, 920, DateTimeKind.Local).AddTicks(4940),
                            Description = "Fun and Challenging",
                            Image = "category-icon-5.jpeg",
                            Name = "Finance",
                            SoftDeleted = false
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2024, 6, 3, 17, 17, 7, 920, DateTimeKind.Local).AddTicks(4950),
                            Description = "Invest to your body",
                            Image = "category-icon-6.jpeg",
                            Name = "Health and Fitness",
                            SoftDeleted = false
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2024, 6, 3, 17, 17, 7, 920, DateTimeKind.Local).AddTicks(4950),
                            Description = "Improve your business",
                            Image = "category-icon-7.jpeg",
                            Name = "Marketing",
                            SoftDeleted = false
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2024, 6, 3, 17, 17, 7, 920, DateTimeKind.Local).AddTicks(4950),
                            Description = "New Skills,New You",
                            Image = "category-icon-8.jpeg",
                            Name = "Lifestyle",
                            SoftDeleted = false
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2024, 6, 3, 17, 17, 7, 920, DateTimeKind.Local).AddTicks(4950),
                            Description = "Major or Minor",
                            Image = "category-icon-9.jpeg",
                            Name = "Music",
                            SoftDeleted = false
                        });
                });

            modelBuilder.Entity("EducalBack.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("SoftDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2024, 6, 3, 17, 17, 7, 920, DateTimeKind.Local).AddTicks(5010),
                            Description = "Front-End is everything",
                            Name = "Front-End",
                            Price = 2500m,
                            SoftDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2024, 6, 3, 17, 17, 7, 920, DateTimeKind.Local).AddTicks(5010),
                            Description = "Back-End is everything",
                            Name = "Back-End",
                            Price = 4000m,
                            SoftDeleted = false
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2024, 6, 3, 17, 17, 7, 920, DateTimeKind.Local).AddTicks(5020),
                            Description = "UX-UI is everything",
                            Name = "UX-UI",
                            Price = 2525m,
                            SoftDeleted = false
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2024, 6, 3, 17, 17, 7, 920, DateTimeKind.Local).AddTicks(5020),
                            Description = "Design is everything",
                            Name = "Graphic Design",
                            Price = 1600m,
                            SoftDeleted = false
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 3,
                            CreatedDate = new DateTime(2024, 6, 3, 17, 17, 7, 920, DateTimeKind.Local).AddTicks(5020),
                            Description = "Data is everything",
                            Name = "Data Analytics",
                            Price = 4500m,
                            SoftDeleted = false
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 8,
                            CreatedDate = new DateTime(2024, 6, 3, 17, 17, 7, 920, DateTimeKind.Local).AddTicks(5030),
                            Description = "Pilates is everything",
                            Name = "Pilates",
                            Price = 1300m,
                            SoftDeleted = false
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 7,
                            CreatedDate = new DateTime(2024, 6, 3, 17, 17, 7, 920, DateTimeKind.Local).AddTicks(5030),
                            Description = "SMM is everything",
                            Name = "SMM",
                            Price = 1200m,
                            SoftDeleted = false
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 9,
                            CreatedDate = new DateTime(2024, 6, 3, 17, 17, 7, 920, DateTimeKind.Local).AddTicks(5050),
                            Description = "Piano is everything",
                            Name = "Piano Lessons",
                            Price = 340m,
                            SoftDeleted = false
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 9,
                            CreatedDate = new DateTime(2024, 6, 3, 17, 17, 7, 920, DateTimeKind.Local).AddTicks(5050),
                            Description = "Guitar is everything",
                            Name = "Guitar Lessons",
                            Price = 300m,
                            SoftDeleted = false
                        });
                });

            modelBuilder.Entity("EducalBack.Models.CourseImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            IsMain = true,
                            Name = "course-1.jpeg"
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 1,
                            IsMain = false,
                            Name = "course-2.jpeg"
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 2,
                            IsMain = false,
                            Name = "course-3.jpeg"
                        },
                        new
                        {
                            Id = 4,
                            CourseId = 2,
                            IsMain = true,
                            Name = "course-4.jpeg"
                        },
                        new
                        {
                            Id = 5,
                            CourseId = 3,
                            IsMain = false,
                            Name = "course-5.jpeg"
                        },
                        new
                        {
                            Id = 6,
                            CourseId = 3,
                            IsMain = true,
                            Name = "course-6.jpeg"
                        },
                        new
                        {
                            Id = 7,
                            CourseId = 4,
                            IsMain = true,
                            Name = "course-1.jpeg"
                        },
                        new
                        {
                            Id = 8,
                            CourseId = 4,
                            IsMain = false,
                            Name = "course-2.jpeg"
                        },
                        new
                        {
                            Id = 9,
                            CourseId = 5,
                            IsMain = false,
                            Name = "course-3.jpeg"
                        },
                        new
                        {
                            Id = 10,
                            CourseId = 5,
                            IsMain = true,
                            Name = "course-4.jpeg"
                        },
                        new
                        {
                            Id = 11,
                            CourseId = 6,
                            IsMain = true,
                            Name = "course-5.jpeg"
                        },
                        new
                        {
                            Id = 12,
                            CourseId = 6,
                            IsMain = false,
                            Name = "course-6.jpeg"
                        },
                        new
                        {
                            Id = 13,
                            CourseId = 7,
                            IsMain = true,
                            Name = "course-1.jpeg"
                        },
                        new
                        {
                            Id = 14,
                            CourseId = 7,
                            IsMain = false,
                            Name = "course-2.jpeg"
                        },
                        new
                        {
                            Id = 15,
                            CourseId = 8,
                            IsMain = false,
                            Name = "course-3.jpeg"
                        },
                        new
                        {
                            Id = 16,
                            CourseId = 8,
                            IsMain = true,
                            Name = "course-4.jpeg"
                        },
                        new
                        {
                            Id = 17,
                            CourseId = 9,
                            IsMain = true,
                            Name = "course-5.jpeg"
                        },
                        new
                        {
                            Id = 18,
                            CourseId = 9,
                            IsMain = false,
                            Name = "course-6.jpeg"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EducalBack.Models.Course", b =>
                {
                    b.HasOne("EducalBack.Models.Category", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("EducalBack.Models.CourseImage", b =>
                {
                    b.HasOne("EducalBack.Models.Course", "Course")
                        .WithMany("CourseImages")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EducalBack.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EducalBack.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducalBack.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EducalBack.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EducalBack.Models.Category", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("EducalBack.Models.Course", b =>
                {
                    b.Navigation("CourseImages");
                });
#pragma warning restore 612, 618
        }
    }
}
